import"./CipherOutput-BauRf-lR.js";import{d as n,e as s}from"./decrypt-CnAt0kgT.js";import{C as u}from"./CipherCard-DzR_oNuN.js";import c from"./KeySubstitution-nFRlct25.js";import{d as m,r as h,i as y,l as a,g as o,k as d,b as e,h as i,o as b}from"./index-CtaXrnvh.js";import"./_plugin-vue_export-helper-DlAUqK2U.js";import"./ScanLine-BWCReJkX.js";import"./mixin-D7gzf2yP.js";const l=Object.freeze(Object.defineProperty({__proto__:null,decrypt:n,encrypt:s},Symbol.toStringTag,{value:"Module"})),E=m({__name:"SubstitutionView",setup(f){const t=h({cipherAlphabet:"qwertyuiopasdfghjklzxcvbnm"});return(g,r)=>(b(),y(u,{title:"Simple Substitution Cipher","encrypt-algorithm":o(l).encrypt(t.value),"decrypt-algorithm":o(l).decrypt(t.value),"cipher-key":t.value},{theory:a(()=>r[1]||(r[1]=[e("p",null," One of the oldest ciphers, where each plaintext letter is mapped to a fixed substitute letter, creating a scrambled alphabet. ",-1),e("h3",null,"How It Works",-1),e("p",null,"A random permutation of the alphabet is used (e.g., A→Z, B→Y, C→X, ..., Z→A). Example:",-1),e("div",{class:"cipher-example"},[i(" Plaintext: A B C D E F G ... Z"),e("br"),i(" Ciphertext: Z Y X W V U T ... A ")],-1),e("h3",null,"Mathematical Formula",-1),e("p",null,[i("Encryption: "),e("strong",null,"E(x) = σ(x)"),i(", where σ is a permutation function.")],-1),e("h3",null,"Security",-1),e("p",null," Vulnerable to frequency analysis (e.g., E→T, A→E patterns). Possible keys: 26! (~88 bits), but broken by linguistic patterns. ",-1)])),cipherKey:a(()=>[d(c,{"cipher-key":t.value,"onUpdate:cipherKey":r[0]||(r[0]=p=>t.value=p)},null,8,["cipher-key"])]),_:1},8,["encrypt-algorithm","decrypt-algorithm","cipher-key"]))}});export{E as default};
