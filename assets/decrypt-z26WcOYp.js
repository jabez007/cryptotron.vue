import{g as f,t as s,a as u,m as i}from"./CipherOutput-BauRf-lR.js";function m(r){if(!(Number.isInteger(r.alpha)&&Number.isInteger(r.beta)))throw new Error("Both key values must be integers");if(f(r.alpha,26)!==1)throw new Error(`No inverse found for alpha value ${r.alpha}`);return s((e,a,n)=>{const t=u(e);return String.fromCharCode(i(r.alpha*(n.charCodeAt(a)-t)+r.beta,26)+t)})}function h(r){if(!Number.isInteger(r))throw new Error("Input value must be an integer");for(let e=1;e<26;e+=1)if(r*e%26===1)return e;return NaN}function p(r){if(!(Number.isInteger(r.alpha)&&Number.isInteger(r.beta)))throw new Error("Both key values must be integers");const e=h(r.alpha);if(Number.isNaN(e))throw new Error(`No inverse found for alpha value ${r.alpha}`);return s((a,n,t)=>{const o=u(a);return String.fromCharCode(i(e*(t.charCodeAt(n)-o-r.beta),26)+o)})}export{p as d,m as e};
