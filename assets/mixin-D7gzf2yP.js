import{r as b,a6 as y,z as u,y as p}from"./index-CtaXrnvh.js";function m(r,t,n={}){const a=b({}),f=(e,s)=>{const l=n[e]||[],o=[];for(const c of l){const i=c(s);i&&o.push(i)}return o};y(()=>{const e={};for(const s in r.cipherKey)Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=f(s,r.cipherKey[s]));a.value=e});const g=e=>{const s=u({get:()=>r.cipherKey[e],set:i=>{const h=f(e,i);a.value[e]=h,h.length===0&&t("update:cipherKey",{...r.cipherKey,[e]:i})}}),l=u(()=>a.value[e]||[]),o=u(()=>l.value.length===0),c=u(()=>!o.value);return p({value:s,errors:l,isValid:o,hasError:c})},d=u(()=>{const e=Object.values(a.value).flat();return{isValid:e.length===0,errors:e}});return{createPropertyComputed:g,validation:d}}const M={required:r=>r==null||r===""?"This field is required":null,numberRange:(r,t)=>n=>typeof n!="number"||isNaN(n)?"Must be a valid number":n<r||n>t?`Must be between ${r} and ${t}`:null,minLength:r=>t=>typeof t!="string"?"Must be a string":t.length<r?`Must be at least ${r} characters long`:null,maxLength:r=>t=>typeof t!="string"?"Must be a string":t.length>r?`Must be no more than ${r} characters long`:null,pattern:(r,t)=>n=>typeof n!="string"?"Must be a string":r.test(n)?null:t};export{m as u,M as v};
